{
  "openapi": "3.0.1",
  "info": {
    "title": "Aztrix on-the-go API"
  },
  "servers": [
    {
      "url": "https://api.aztrix.me/webhook/",
      "description": "Aztrix on-the-go server"
    },
    {
      "url": "https://api.aztrix.me/webhook-test/",
      "description": "Aztrix on-the-go test server"
    }
  ],
  "tags": [
    {
      "name": "users"
    },
    {
      "name": "locations"
    },
    {
      "name": "sites"
    },
    {
      "name": "inbox"
    },
    {
      "name": "ai"
    },
    {
      "name": "whitelabel"
    },
    {
      "name": "notifications"
    },
    {
      "name": "publish"
    },
    {
      "name": "analytics"
    }
  ],
  "paths": {
    "/user/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Provides an access_token for the user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out"
          },
          "500": {
            "description": "Error occurred during logout"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/user/oauth": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Finish OAuth flow",
        "description": "Provides an access_token for a authorization_code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authorization_code": {
                    "type": "string",
                    "description": "Authorization code"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "Access Token"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/reset-password": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Resets the user's password",
        "description": "Changes the user's password to a new password",
        "requestBody": {
          "description": "A ResetPassword object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User password succesfully changed"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the current user",
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update the current user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/location": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get a Location",
        "description": "Get all information about a specific location, including listing statuses",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique id of the location",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "locations"
        ],
        "summary": "Update a Location",
        "description": "Make changes to a location. Any blank parameter deletes an old value, any unspecified parameter does nothing",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The uberall unique id for the location you want to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Location object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Location successfully edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get locations",
        "parameters": [
          {
            "name": "locationIds",
            "in": "query",
            "description": "Only return locations identified by ids listed in locationIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "?locationIds=20&locationIds=22 for multiple locations"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filter by name, zip, street, city, label",
            "schema": {
              "type": "string"
            },
            "example": "Berlin"
          }
        ],
        "responses": {
          "200": {
            "description": "Locations successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "response": {
                      "type": "object",
                      "properties": {
                        "offset": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "max": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "count": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "locations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get categories",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filter categories by a search query",
            "schema": {
              "type": "string"
            },
            "example": "Auto"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Show categories in the specified language. One of de, en, es, fr",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "A list of categories",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "location/photo": {
      "post": {
        "tags": [
          "locations"
        ],
        "requestBody": {
          "description": "The photo data to upload",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "locationId",
                  "photo",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A description for the photo - max 255 chars"
                  },
                  "locationId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Location ID"
                  },
                  "photo": {
                    "type": "string",
                    "description": "file or base64"
                  },
                  "type": {
                    "$ref": "#/components/schemas/LocationPhotoType"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "locations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The photo has been deleted"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Invalid or Missing parameter"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/site/colors": {
      "get": {
        "tags": [
          "sites"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "sites"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "primary100": {
                    "type": "string"
                  },
                  "primary300": {
                    "type": "string"
                  },
                  "primary500": {
                    "type": "string"
                  },
                  "primary900": {
                    "type": "string"
                  },
                  "secondary100": {
                    "type": "string"
                  },
                  "secondary300": {
                    "type": "string"
                  },
                  "secondary500": {
                    "type": "string"
                  },
                  "secondary900": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/conversation": {
      "post": {
        "tags": [
          "ai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "conversationId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "userLocation": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number",
                        "format": "double"
                      },
                      "lng": {
                        "type": "number",
                        "format": "double"
                      },
                      "freeform": {
                        "type": "string"
                      }
                    }
                  },
                  "dateTime": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "conversationId": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "description": "All messages in the conversation including the assistant response",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/chat": {
      "post": {
        "tags": [
          "ai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId"
                ],
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "description": "All messages in the conversation including the assistant response",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/memories": {
      "get": {
        "tags": [
          "ai"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved memories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "next": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "previous": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "memories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "categories": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "ai"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "The conversation where memories should be retrieved from",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ai"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted memory"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/system": {
      "get": {
        "tags": [
          "ai"
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "type": "string"
                    },
                    "context": {
                      "type": "string"
                    },
                    "exemplar": {
                      "type": "string"
                    },
                    "persona": {
                      "type": "string"
                    },
                    "format": {
                      "type": "string"
                    },
                    "tone": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inbox": {
      "post": {
        "tags": [
          "inbox"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channels": {
                    "type": "string",
                    "enum": [
                      "cylex-review",
                      "google-review",
                      "iglobal-review",
                      "stadtbranchenbuch-review",
                      "whereto-review",
                      "cylex-comment",
                      "facebook-comment",
                      "facebook-recommendation",
                      "facebook-post",
                      "facebook-recommendationcomment",
                      "google-comment",
                      "google-question",
                      "google-photo",
                      "google-answer",
                      "instagram-comment",
                      "instagram-post",
                      "iglobal-comment",
                      "whereto-comment"
                    ]
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "resolved",
                        "unresolved",
                        "replied",
                        "unreplied",
                        "contentUpdated",
                        "contentNonUpdated"
                      ]
                    }
                  },
                  "page": {
                    "type": "number",
                    "default": 1
                  },
                  "pageSize": {
                    "type": "number",
                    "default": 20
                  },
                  "sort": {
                    "type": "string",
                    "default": "date"
                  },
                  "sortDir": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "desc"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InboxItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/inbox/item": {
      "get": {
        "tags": [
          "inbox"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxItem"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/inbox/item/children": {
      "get": {
        "tags": [
          "inbox"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InboxItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/inbox/reply": {
      "post": {
        "tags": [
          "inbox"
        ],
        "parameters": [
          {
            "name": "datapointId",
            "in": "path",
            "description": "Data point ID you want to reply to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "required": [
                    "reply"
                  ],
                  "reply": {
                    "type": "string",
                    "description": "The text you want to reply"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reply sent",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DataPointResponseWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "404": {
            "description": "Data point not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/whitelabel": {
      "get": {
        "tags": [
          "whitelabel"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelabelData"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "notifications/register": {
      "post": {
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "notifications/config": {
      "get": {
        "tags": [
          "notifications"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "newReviews": {
                      "type": "boolean"
                    },
                    "newReviewsIgnoreDirectories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DirectoryType"
                      }
                    },
                    "newReviewsIgnoreStars": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "newSocialComments": {
                      "type": "boolean"
                    },
                    "aiSuggestions": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "notifications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newReviews": {
                    "type": "boolean"
                  },
                  "newReviewsIgnoreDirectories": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DirectoryType"
                    }
                  },
                  "newReviewsIgnoreStars": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "newSocialComments": {
                    "type": "boolean"
                  },
                  "aiSuggestions": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "publish/posts": {
      "get": {
        "tags": [
          "publish"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialPostsResponseWrapper"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "publish"
        ],
        "requestBody": {
          "description": "A SocialPost object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Social Posts created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialPostWrapper"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/location/listings": {
      "get": {
        "tags": [
          "locations"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "The unique id of the location",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details successfully retrieved",
            "content": {
              "*/*": {
                "schema": {
                  "listings": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Listing"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/analytics": {
      "get": {
        "tags": [
          "analytics"
        ],
        "parameters": [
          {
            "name": "businessIds",
            "in": "query",
            "description": "The ids of the businesses you want insights data for",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "locationIds",
            "in": "query",
            "description": "The ids of the locations you want insights data for",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "textFilter",
            "in": "query",
            "description": "Filter locations to get insights data for by name, zip, street, city, label",
            "schema": {
              "type": "string"
            },
            "example": "Berlin"
          },
          {
            "name": "type",
            "in": "query",
            "description": "The directory you want insights for. Can be GOOGLE, FACEBOOK, BING or YELP_API",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "How to group the results, one of: HOUR (only for ACTIONS-PHONE), DAY, WEEK, MONTH, YEAR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metrics",
            "in": "query",
            "description": "The types of metrics you want to get",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved insights data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsWrapper"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Invalid or Missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "LoginBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "description": "User Password"
          }
        },
        "description": "Login Command"
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access Token"
          },
          "oauth": {
            "type": "boolean",
            "description": "Whether OAuth should be initiated"
          }
        },
        "description": "User access_token"
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "User": {
        "required": [
          "firstname",
          "lastname",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The uberall unique id for the user",
            "format": "int64"
          },
          "salutation": {
            "type": "string",
            "description": "One of MALE, FEMALE or OTHER",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER"
            ]
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "firstname": {
            "type": "string",
            "description": "First Name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "phone": {
            "type": "string",
            "description": "The user''s phone number"
          },
          "status": {
            "type": "string",
            "description": "The status of the current user. One of CREATED, VERIFIED, UNVERIFIED, INVITED, INACTIVE, NO_LOGIN",
            "enum": [
              "INVITED",
              "CREATED",
              "VERIFIED",
              "UNVERIFIED",
              "INACTIVE",
              "DELETED",
              "NO_LOGIN"
            ]
          },
          "role": {
            "type": "string",
            "description": "User Role",
            "enum": [
              "UBER_API_ADMIN",
              "API_ADMIN",
              "ADMIN",
              "ACCOUNT_MANAGER",
              "BUSINESS_MANAGER",
              "LOCATION_MANAGER",
              "BUSINESS_MANAGER_INBOX"
            ]
          },
          "managedLocations": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of locations managed by this user",
            "items": {
              "type": "integer"
            }
          },
          "managedBusinesses": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of business ids managed by this user",
            "items": {
              "type": "number"
            }
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred language of a user. If not set, this will default to the language in context, e.g., location''s for e-mails and browser language for our applications."
          },
          "identifier": {
            "type": "string",
            "description": "The unique user identifier based on your internal identification system"
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of features this user can work with. Values: \n<pre>ADS_READ\nADS_WRITE\nADVANCED_ANALYTICS\nAI_SUGGESTED_REPLIES\nAPPLE_POSTING_WRITE\nAUTO_RESPONSE_WRITE\nBULK_UPDATES\nBUSINESS_LEVEL_CONNECT\nCAN_PAY_INVOICE\nCAN_SEE_HELP_SECTION\nCHAT_READ\nCHAT_WRITE\nCHATBOT_READ\nCHATBOT_WRITE\nDAM\nENTERPRISE_ONBOARDING\nFIRST_PARTY_REVIEW_APPROVAL\nFORMS\nINBOX_2_0_BETA_READ\nINBOX_2_0_BETA_WRITE\nINBOX_APPROVAL\nINBOX_READ\nINBOX_WRITE\nINSTAGRAM_POSTING_WRITE\nLISTINGS_PAGE_NEW\nLISTINGS\nLIVE_CHAT\nLOCATION_GROUP\nLOCATION_READ\nLOCATION_SCHEDULED_UPDATES\nLOCATION_STATUS_CHANGE\nLOCATION_WRITE\nPOSTING_APPROVAL\nPOSTING_READ\nPOSTING_WRITE\nPRICE_INFO\nRESPONSE_LIBRARY_READ\nRESPONSE_LIBRARY_WRITE\nREVIEW_GENERATION_CREATE\nREVIEW_GENERATION_SEND\nSINGLE_SIGN_ON\nSOCIAL_ADS\nSUPPRESSION\nTRACKING\nUPGRADE\nUSER_OTHERS_EDIT\nUSER_SELF_EDIT</pre>",
            "items": {
              "type": "string",
              "description": "A list of features this user can work with"
            }
          },
          "featuresDetailed": {
            "type": "object",
            "description": "Map containing the feature names and corresponding feature-specific parameters. \"featuresDetailed\" is supported for the features LOCATION_WRITE and ADVANCED_ANALYTICS. \nFor LOCATION_WRITE a list of fields that this user can update is expected. \nFor ADVANCED_ANALYTICS a list of dashboards the user has access to is expected.\nFor example:\n<pre>\n\"featuresDetailed\": '{'\n'{'\n   \"featuresDetailed\":'{'\n      \"LOCATION_WRITE\":[\n         \"fax\",\n         \"openingHours\",\n         \"callTrackingNumbers\",\n         \"streetNo\",\n         \"openingHoursNotes\",\n         \"specialOpeningHours\",\n         \"street\",\n         \"languages\",\n         \"customFields\",\n         \"contentLists\",\n         \"photos\",\n         \"services\",\n         \"moreHours\",\n         \"descriptionLong\",\n         \"zip\",\n         \"lat\",\n         \"openingDate\",\n         \"email\",\n         \"addressDisplay\",\n         \"labels\",\n         \"taxNumber\",\n         \"city\",\n         \"cellphone\",\n         \"contentCollections\",\n         \"attributes\",\n         \"categories\",\n         \"imprint\",\n         \"phone\",\n         \"utms\",\n         \"addressExtra\",\n         \"keywords\",\n         \"legalIdent\",\n         \"lng\",\n         \"paymentOptions\",\n         \"descriptionShort\",\n         \"socialProfiles\",\n         \"identifier\",\n         \"website\",\n         \"country\",\n         \"province\",\n         \"name\",\n         \"videos\",\n         \"brands\",\n         \"serviceAreas\"\n      ],\n      \"ADVANCED_ANALYTICS\":[\n         \"overview\",\n         \"listings-google\",\n         \"customer-feedback\"\n      ]\n   '}'\n'}'\n</pre>"
          },
          "locationGroupIds": {
            "type": "array",
            "description": "A list of all location IDs the user can manage because of assignment to certain group(s)",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "managedLocationsViaGroups": {
            "type": "array",
            "description": "A list of all location IDs the user can manage because of assignment to certain group(s)",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "whitelabelInformationIdentifier": {
            "type": "string",
            "description": "Mandatory If there is more than one whitelabel for the sales partner</br>\nParameter not provided: If there is only one whitelabel for the sales partner we default to it</br>\nParameter not provided: If a child sales partner does not have whitelabels and the father has only one we default to the father whitelabel</br>"
          }
        },
        "description": "User Model"
      },
      "Location": {
        "required": [
          "categories",
          "city",
          "country",
          "name",
          "street"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The uberall unique id for the location.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The location''s name."
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "cellphone": {
            "type": "string",
            "description": "A contact mobile phone number"
          },
          "phone": {
            "type": "string",
            "description": "The location''s contact phone number."
          },
          "fax": {
            "type": "string",
            "description": "The location fax number"
          },
          "email": {
            "type": "string",
            "description": "A contact email for the location"
          },
          "description": {
            "type": "string",
            "description": "A description of the location"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Keywords describing the locations activity"
            }
          },
          "openingHours": {
            "$ref": "#/components/schemas/OpeningHours"
          },
          "specialOpeningHours": {
            "$ref": "#/components/schemas/SpecialOpeningHours"
          },
          "coverPhoto": {
            "$ref": "#/components/schemas/LocationPhoto"
          },
          "photos": {
            "uniqueItems": true,
            "type": "array",
            "description": "The location''s photos.",
            "items": {
              "type": "object",
              "description": "The location's photos",
              "$ref": "#/components/schemas/LocationPhoto"
            }
          },
          "timezone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "description": "A list of category IDs describing the location",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating of all Google Reviews",
            "format": "float"
          },
          "reviewCount": {
            "type": "integer",
            "description": "How many Google Reviews this location has in total",
            "format": "int32"
          }
        },
        "description": "Location"
      },
      "Address": {
        "type": "object",
        "properties": {
          "countryCode": {
            "minLength": 0,
            "pattern": "^[a-zA-Z]{2}$",
            "type": "string"
          },
          "city": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "streetAndNo": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "postalCode": {
            "minLength": 0,
            "maxLength": 10,
            "type": "string"
          },
          "region": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "sublocality": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "extraDescription": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "latitude": {
            "minimum": -90,
            "maximum": 90,
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "minimum": -180,
            "maximum": 180,
            "type": "number",
            "format": "double"
          }
        }
      },
      "OpeningHours": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OpeningHour"
        },
        "description": "Opening hours"
      },
      "OpeningHour": {
        "required": [
          "dayOfWeek"
        ],
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "required": true,
            "type": "integer",
            "description": "The weekday (1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday)",
            "format": "int32"
          },
          "closed": {
            "required": true,
            "type": "boolean",
            "description": "Open or closed on [dayOfWeek]"
          },
          "intervals": {
            "type": "array",
            "description": "A list of openinghours (time intervals), only required when `closed` is `false`",
            "items": {
              "interval": {
                "type": "object",
                "description": "A time interval (e.g. 12:00-15:00)",
                "properties": {
                  "start": {
                    "type": "string",
                    "description": "the start time (format HH:mm)"
                  },
                  "end": {
                    "type": "string",
                    "description": "the end time (format HH:mm)"
                  }
                }
              }
            }
          }
        },
        "description": "Opening Hours",
        "example": [
          {
            "dayOfWeek": 1,
            "intervals": [
              {
                "start": "08:00",
                "end": "11:00"
              }
            ]
          },
          {
            "dayOfWeek": 2,
            "intervals": [
              {
                "start": "08:00",
                "end": "11:00"
              },
              {
                "start": "13:00",
                "end": "21:00"
              }
            ]
          },
          {
            "dayOfWeek": 3,
            "closed": true
          }
        ]
      },
      "SpecialOpeningHours": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SpecialOpeningHour"
        },
        "description": "Special opening hours"
      },
      "SpecialOpeningHour": {
        "required": [
          "date"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of a special opening hour (format: yyyy-MM-dd)"
          },
          "closed": {
            "type": "boolean",
            "description": "Open or closed on [date]"
          },
          "intervals": {
            "type": "array",
            "description": "A list of hour ranges (time intervals), only required when `closed` is `false`",
            "items": {
              "interval": {
                "type": "object",
                "description": "A time interval (e.g. 12:00-15:00). 24 hours opened => 00:00-23:59",
                "properties": {
                  "start": {
                    "type": "string",
                    "description": "the start time (format HH:mm)"
                  },
                  "end": {
                    "type": "string",
                    "description": "the end time (format HH:mm)"
                  }
                }
              }
            }
          }
        },
        "description": "Special Opening Hours",
        "example": [
          {
            "date": "1991-06-12",
            "closed": true
          },
          {
            "date": "1991-06-13",
            "intervals": [
              {
                "start": "08:00",
                "end": "21:00"
              }
            ]
          }
        ]
      },
      "SocialProfile": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url of the Social Profile"
          },
          "type": {
            "type": "string",
            "description": "Social Profile Type. Values: [FACEBOOK, LINKEDIN, TWITTER, YOUTUBE, XING, INSTAGRAM, FOURSQUARE, PINTEREST]",
            "enum": [
              "FACEBOOK",
              "LINKEDIN",
              "TWITTER",
              "YOUTUBE",
              "XING",
              "INSTAGRAM",
              "FOURSQUARE",
              "PINTEREST",
              "VIMEO"
            ]
          }
        },
        "description": "Social Profile"
      },
      "Listing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the listing.",
            "format": "int64"
          },
          "type": {
            "description": "The directory where this listing appears.",
            "$ref": "#/components/schemas/DirectoryType"
          },
          "syncStatus": {
            "type": "string",
            "description": "The listing''s sync status.",
            "enum": [
              "IN_SYNC",
              "NOT_IN_SYNC",
              "NOT_FOUND",
              "TECHNICAL_PROBLEMS",
              "NOT_SUPPORTED",
              "NO_ONLINE_LISTING",
              "LINK_ONLY"
            ]
          },
          "claimStatus": {
            "type": "string",
            "description": "Claim status of the listing.",
            "enum": [
              "CLAIMABLE",
              "NOT_CLAIMABLE",
              "CLAIMED_BY_US",
              "CLAIMED_BY_OTHERS",
              "CLAIMED_BY_ANOTHER_US",
              "CLAIMING_IN_PROGRESS",
              "UNKNOWN"
            ]
          },
          "listingId": {
            "type": "string",
            "description": "The listing''s id in the directory''s database."
          },
          "listingUrl": {
            "type": "string",
            "description": "The listing''s URL on the directory''s website."
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A map containing optional information about the listing",
              "example": "latestVisibilityIndex"
            },
            "description": "A map containing optional information about the listing, e.g. latestVisibilityIndex.",
            "example": "latestVisibilityIndex"
          },
          "lastChecked": {
            "type": "string",
            "description": "The last time the listing was sync-checked.",
            "format": "date-time"
          },
          "lastSuccessfulUpdate": {
            "type": "string",
            "description": "The last time the listing was successfully updated.",
            "format": "date-time"
          },
          "accountInfo": {
            "type": "object",
            "description": "A map consisting of the name and pageId of the connected account if the listing is either Google or Facebook."
          },
          "connectSecret": {
            "type": "string"
          },
          "connectStatus": {
            "type": "string",
            "description": "Connect status of the listing.",
            "enum": [
              "CONNECTED",
              "NOT_CONNECTED",
              "NOT_NEEDED"
            ]
          },
          "status": {
            "type": "string",
            "description": "The listing''s status.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "MANUAL"
            ]
          },
          "typeName": {
            "type": "string",
            "description": "The directory''s name in the language of the current locale."
          }
        },
        "description": "Listing"
      },
      "LocationPhoto": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The uberall unique id for the photo",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "A description for the photo - max 255 chars"
          },
          "url": {
            "type": "string",
            "description": "url of the photo"
          },
          "thumbnailUrl": {
            "type": "string",
            "description": "Url for the image thumbnail"
          }
        },
        "description": "Location Photo"
      },
      "LocationPhotoType": {
        "type": "string",
        "enum": [
          "MAIN",
          "DOCTOR_COM_PORTRAIT",
          "LOGO",
          "STOREFINDER_LOGO",
          "SQUARED_LOGO",
          "LANDSCAPE",
          "STOREFINDER_COVER",
          "FACEBOOK_LANDSCAPE",
          "MENU",
          "PHOTO",
          "ROOMS",
          "TEAMS",
          "AT_WORK",
          "PRODUCT",
          "EXTERIOR",
          "INTERIOR",
          "COMMON_AREA",
          "FOOD_AND_DRINK"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The uberall unique id for the category",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The category description"
          },
          "parent": {
            "type": "integer",
            "description": "The uberall unique id for the parent category",
            "format": "int64"
          },
          "selectable": {
            "type": "boolean",
            "description": "Boolean indicating whether the category can be used"
          }
        },
        "description": "Represents one of uberall's categories"
      },
      "InboxItem": {
        "type": "object",
        "properties": {
          "actionDate": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "object",
            "properties": {
              "image": {
                "type": "string"
              },
              "isClient": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "businessIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contentType": {
            "type": "string",
            "enum": [
              "review",
              "comment",
              "recommendation",
              "recommendationcomment",
              "post",
              "photo"
            ]
          },
          "dataPointId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "indexedDate": {
            "type": "string",
            "format": "date-time"
          },
          "isBrand": {
            "type": "boolean"
          },
          "isExpandedReviewNetwork": {
            "type": "boolean"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "locationId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metrics": {
            "type": "object",
            "properties": {
              "likes": {
                "type": "integer"
              }
            }
          },
          "nativeId": {
            "type": "string"
          },
          "nativeLink": {
            "type": "string"
          },
          "nativeVenueLink": {
            "type": "string"
          },
          "parentDataPointId": {
            "type": "string"
          },
          "parentIdLink": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "format": "double"
          },
          "provider": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "rootDataPointId": {
            "type": "string"
          },
          "rootIdLink": {
            "type": "string"
          },
          "salesPartnerId": {
            "type": "string"
          },
          "sortDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "image": {
                  "type": "string"
                },
                "dataPointId": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BrandDataPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The uberall unique id of the data point",
            "format": "int64"
          },
          "liked": {
            "type": "boolean",
            "description": "Whether this datapoint has been liked or not"
          },
          "data": {
            "type": "string",
            "description": "Content of the datapoint (text of the review, url of the photo, count of checkins...)"
          },
          "type": {
            "type": "string",
            "description": "Datapoint Type. Values: [PHOTO, REVIEW, CHECKIN, CONVERSATION, QUESTION]",
            "enum": [
              "REVIEW",
              "PHOTO",
              "CHECKIN",
              "CONVERSATION",
              "COMMENT",
              "QUESTION",
              "POST",
              "IMAGE",
              "VIDEO",
              "CAROUSEL_ALBUM",
              "LINK",
              "EXPANDEDREVIEW",
              "AD_POST"
            ]
          },
          "actionDate": {
            "type": "string",
            "description": "The date when the review/photo/... was published in the online directory",
            "format": "date-time"
          },
          "author": {
            "type": "string",
            "description": "Username of the datapoints author"
          },
          "authorImage": {
            "type": "string",
            "description": "Author profile picture url"
          },
          "countComments": {
            "type": "integer",
            "description": "Number of comments to this item.",
            "format": "int32"
          },
          "dateCreated": {
            "type": "string",
            "description": "The date the datapoint was found",
            "format": "date-time"
          },
          "directLink": {
            "type": "string",
            "description": "A link to the online profile"
          },
          "directoryType": {
            "description": "Online directory reference name",
            "$ref": "#/components/schemas/DirectoryType"
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the datapoint has been flagged. The exact nature of the flagging depends on the directory, but can be e.g. \"Report as SPAM\""
          },
          "lastUpdated": {
            "type": "string",
            "description": "Date of last update",
            "format": "date-time"
          },
          "rating": {
            "type": "number",
            "description": "Rating given by the user. Float value, max: 5.",
            "format": "float"
          },
          "repliedByOwner": {
            "type": "boolean",
            "description": "True if the owner of the business has replied"
          },
          "secondaryData": {
            "type": "string",
            "description": "Additional info about the datapoint (eg. text content on instagram pictures)"
          },
          "threadActionDate": {
            "type": "string",
            "description": "The date of the last interaction in that thread. When a review receives a new comment, the parent will update.",
            "format": "date-time"
          }
        },
        "description": "Brand Data Point Model"
      },
      "WhitelabelData": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": [
              "light",
              "dark"
            ]
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "tertiaryColor": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          }
        }
      },
      "DirectoryType": {
        "type": "string",
        "enum": [
          "FOURSQUARE",
          "UBER",
          "GOOGLE",
          "WAZE",
          "GOOGLE_MAPS",
          "YELP",
          "YELP_API",
          "MEINESTADT",
          "YELLOW_MAP",
          "FOCUS",
          "LOKALEAUSKUNFT",
          "WEB_DE",
          "GMX",
          "ONE_AND_ONE",
          "FREIEAUSKUNFT",
          "POINTOO",
          "NOKIA_HERE",
          "FACEBOOK",
          "TOMTOM",
          "STADTBRANCHENBUCH",
          "CYLEX",
          "UNTERNEHMENSAUSKUNFT",
          "ACOMPIO",
          "BUSINESSBRANCHENBUCH",
          "YALWA",
          "THE_PHONEBOOK",
          "SCOOT",
          "CENTRAL_INDEX",
          "CITIPAGES",
          "ONE_NINE_TWO",
          "ONE_ONE_EIGHT",
          "THE_DAILY_RECORD",
          "THE_EVENING_STANDARD",
          "THE_SCOTSMAN",
          "LIVERPOOL_ECHO",
          "THE_SUN",
          "THE_INDEPENDENT",
          "TOUCH_LOCAL",
          "THE_MIRROR",
          "ANNUAIRE",
          "INFOBEL",
          "US_INFO_COM",
          "GARMIN",
          "FACTUAL",
          "BING",
          "WO_GIBTS_WAS",
          "KOOMIO",
          "ABCLOCAL",
          "YELLBO",
          "JELLOO",
          "GUIDELOCAL",
          "OEFFNUNGSZEITENBUCH",
          "APPLE_MAPS",
          "LOOCAL",
          "REGIONAL_DE",
          "WHERE_TO",
          "TUPALO",
          "GELBE_SEITEN",
          "DAS_OERTLICHE",
          "DIALO",
          "BUNDES_TELEFONBUCH",
          "BRANCHENBUCH_DEUTSCHLAND",
          "MARKTPLATZ_MITTELSTAND",
          "BUSQUEDA_LOCAL",
          "RICERCARE_IMPRESE",
          "PAGES24",
          "NAVMII",
          "AUDI",
          "BMW",
          "MERCEDES",
          "VW",
          "TOYOTA",
          "FORD",
          "FIAT",
          "GM",
          "ETRUSTED",
          "INSTAGRAM",
          "SHOPPING_TIME_NETWORK",
          "CITY_SQUARES",
          "SHOWMELOCAL",
          "LOCALSTACK",
          "CHAMBER_OF_COMMERCE",
          "JUDYS_BOOK",
          "BROWNBOOK",
          "MY_LOCAL_SERVICES",
          "YA_SABE",
          "UNIVISION",
          "AL_DIA_TX",
          "LA_VOZ_TX",
          "CHRON",
          "STATESMAN",
          "PALM_BEACH_POST",
          "MUNDO_HISPANICO",
          "EL_TIEMPO_LATINO",
          "LATINOS_US",
          "HOTFROG",
          "INFO_IS_INFO",
          "MANTA",
          "US_CITY",
          "GO_YELLOW",
          "N49",
          "PRATIQUE",
          "JUSTACOTE",
          "EZLOCAL",
          "ELOCAL",
          "TRUE_LOCAL",
          "START_LOCAL",
          "WOMO",
          "AUSSIE_WEB",
          "YELLOW_PAGES",
          "SUPER_PAGES",
          "WHITE_PAGES",
          "DEX_KNOWS",
          "KAUFDA_MANUAL",
          "I_GLOBAL",
          "BRANCHEN_INFO_MANUAL",
          "GUTE_BANKEN_MANUAL",
          "D_11880_COM_MANUAL",
          "BANKOEFFNUNGSZEITEN_DE_MANUAL",
          "BANK_OEFFNUNGSZEITEN_DE_MANUAL",
          "CYLEX_MANUAL",
          "FINDE_OFFEN_MANUAL",
          "MEIN_PROSPEKT_MANUAL",
          "DAS_SCHNELLE",
          "SENSIS_WHITE_PAGES",
          "SENSIS_TRUE_LOCAL",
          "SENSIS_YELLOW_PAGES",
          "FIND_OPEN",
          "WAND",
          "BELL_CA",
          "GO_LOCAL",
          "MEINUNGSMEISTER",
          "YANDEX",
          "YAHOO_MANUAL",
          "HOLIDAY_CHECK",
          "TRIP_ADVISOR",
          "BONIAL_FR",
          "ZIP_CH",
          "PAGES_JAUNES",
          "YELLOW_PAGES_SINGAPORE",
          "INFOGROUP",
          "WAZE_NEW",
          "UBER_NEW",
          "NEUSTAR",
          "TRUSTPILOT",
          "AUSKUNFT",
          "BAIDU",
          "NEXT_DOOR",
          "MICROSOFT_CORTANA",
          "GOOGLE_ASSISTANT",
          "CBANQUE",
          "ORANGE_118_712",
          "SIRI",
          "HUAWEI",
          "DOCTOR_COM",
          "CARE_DASH",
          "DENTAL_PLANS",
          "DOC_SPOT",
          "HEALTHGRADES",
          "SHARE_CARE",
          "VITALS",
          "WEB_MD",
          "WELLNESS",
          "ZOC_DOC",
          "ZWIVEL",
          "YP_COM_HEALTH",
          "BING_HEALTH",
          "NPPES",
          "RATE_MDS",
          "CITYSEARCH",
          "INSIDER_PAGES",
          "TWITTER",
          "ALEXA",
          "MAP_QUEST",
          "WEBSITE_WIDGETS",
          "ECO_MOVEMENT",
          "GOOGLE_EV",
          "APPLE_EV",
          "TESLA_EV",
          "EUROWAG_EV",
          "OPIS_EV",
          "TOMTOM_EV",
          "HERE_EV",
          "YELLOW_PAGES_CANADA",
          "BBB",
          "UBERALL_SOCIAL_ADS",
          "APPLE_APPS",
          "CONSUMER_AFFAIRS",
          "CREDIT_KARMA",
          "DELIVERY",
          "GLASSDOOR",
          "PLAY_GOOGLE",
          "GRUBHUB",
          "INDEED",
          "LENDING_TREE",
          "MENUISM",
          "OPEN_TABLE",
          "OPEN_TABLE_USA",
          "WALLET_HUB",
          "ZILLOW",
          "ZOMATO",
          "WHATS_APP",
          "FOUR_SCREEN",
          "AND_CHARGE",
          "LINKED_IN"
        ]
      },
      "Insights": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "period": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "count": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            }
          },
          "matchedLocationsCount": {
            "type": "integer",
            "description": "The number of locations matching the filter which the insights are returned for",
            "format": "int32"
          }
        },
        "description": "Insights Model"
      }
    },
    "securitySchemes": {
      "authToken": {
        "type": "apiKey",
        "description": "Auth Token key",
        "name": "authToken",
        "in": "header"
      }
    }
  }
}
